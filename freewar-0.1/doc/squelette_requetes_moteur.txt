####################
# creation d'entitée

rappel:
-creation d'une entitée: paramètres: id du constructeur, id du construit,
				     param(s) de la nouvelle entité (>=0).


schema global de la requete:
{
	verif_param_and_access();
	create_entity();
	#retourne l'id de l'entitée crée.
}

#####################
# selection d'entitée

rappel:
-selection: parametres : n entitees a selectionner, son UID(Xn) (voire d'autres informations
 +tard, comme son type, apartenance...)


schema global de la requete:
{
	while(n)
	{
		verif_param_and_access(n);
		select_entity(n);
	}
	# selectionne toutes les unitées possibles, et retourne les ids des autres
}

####################
# mouvement d'entité

rappel: l'identifiant de l'entitee a deplacee, le point d'arrivee,
	les actions a faire suivant un evenement donné.


schema global de la requete:
{
	verif_param
	{
		verif_unit_can_move();
		verif_start_point();
		verif_end_point();
	}
	get_type_obstacle(); #defini dans le type de l'entitee.
	path_finding(start, end, type_obstacles[n]);
	save_path(ID, path, events);
}

####################
# attaque et récolte
-recolte/attak
	parametres: l'entitee qui va recolter/attaker; le type d'entitee 
	qui va etre recoltee/attakee; la position de l'entitee


schema global de la requete:
{
	verif_param();
	{
		verif_capacity();
		verif_portee();
	}
	get_better_weapons();
	get_target_defense();
	get_rate_damage();
	save_recolt/attaque(ID, UI_target, damage, rate);
}


####################
# reinit

rappel: -reinit
	parametres: quels actions mettre a jour (mouvement, attaque,..)

schema global de la requete:
{
	si (attaque/recolte)
		save_info(ID, ID target);
		delete_attaque(ID);
		get_info_target(ID target);
		#relancement d'une action attaque (cf au dessus)
		attaque(ID, type target, x, y);
	si (mouvement)
		get_end_point();
		#relancement d'une action move (cf au dessus)
		move(ID, end_point, events);
	si ? ..
}

##################
# lancement de son

rappel: lancement de son: parametre : l'UID du son a lancer.

schema global de la requete
{
	save_sound(ID, vol);
}


######################### <en cours de reflexion>
# le changement de status

(ou on garde la meme entitee en changeant ce qui doit changer,
 ou on la delete, et on en recree une nouvelle
 si les conditions requises dans la BDD sont remplies.) << rajouter les champs 
							necessaires dans la BDD.
ex:  -le changement de plan provoque des changements de caracts.
     -si l'unitee rentre dans un trasnport.
     -un upgrage fait qu'une unitee aquiere une capacitee.
     - ... ??

rappel: le changement de status d'une entitee 
	ou le changement de type d'une entitee.
params: ID, 

schema global de la requete
{
	
}




..











	