######################
##  Moteur graphique:
#

MAN:
##############################
# create_and_open_screen:
##############################

#
# Ouvre une fenetre a l'ecran.
#

int	create_and_open_screen(int w, int h, int bpp, int mode);

w = largeur en pixel
h = hauteur en pixel
bpp = bit par pixel (habituellement 8, 16, 32)
mode = le mode souhaité (OpenGL, Software, ..)

Par defaut le mode est en fenetre et memoire hardware.

Differents modes disponible:
GFX_FULL = plein ecran
GFX_SW = software
GFX_FULL_SW = software en plein ecran

Si un des modes n'est pas disponible, un autre sera utilisé.

RETURN VALUE
0 s'il a reussi a ouvrir une fenetre, -1 le cas echeant.

##############################
# create_surface:
##############################

#
# Cree une surface virtuelle 
#

int	create_surface(int w, int h, int depth, Uint32 color, int arena);

w = largeur en pixel
h = hauteur en pixel
depth = determine la profondeur de la surface, plus ca sera une valeur
        grande, plus la surface sera affiché proche de l'ecran
color = la couleur initiale de la surface (inutile si c'est une arene)
arena = determine si c'est une arene ou pas.

Une surface "arena" implique plusieurs choses: 
  - la surface est initialisé totalement vide.
  - il peut y avoir des entitees graphiques en dehors du champ de la surface
    (donc non-visible).
  - la surface est doté de coordonnees de vision, on peut les modifier via
    edit_arena. Le champ de vision correspond a la taille de la surface.

Par defaut, une surface n'est pas affiché. Voir edit_surface.

RETURN VALUE
retourne l'identifiant de la surface, -1 s'il n'a pas réussi

##############################
# edit_arena:
##############################

#
# Modifie une surface virtuelle avec l'attribut "arena"
#

int     edit_arena(int id, t_coord *scale, t_coord *offset, int zoom);

id = l'identitifiant de la surface a editer.
scale = coordonnees du point d'origine du champ de vision en carré.
offset= precise dans le "scale" l'offset en pixels.
zoom = zoom en pourcentage. 0 pour la valeur par default ou inchangé.

NOTES
Si scale ou offset sont egal a 0, ils sont inchangés.

RETURN VALUE
retourne 0 s'il a réussi ou -1 sinon.

##############################
# edit_surface:
##############################

#
# Modifie une surface virtuelle 
#

int     edit_surface(int id, int x, int y, int show, int alpha);

id = l'identifiant de la surface a editer
x = les nouvelles coordonnes en abscisses en pixel
y = les nouvelles coordonnes en ordonnees en pixel
show = determine si on veut afficher la surface avec update_surf()
alpha = determine la transparance de la surface. de 0 a 255, 255 etant
        la couleure opaque.

RETURN VALUE
retourne 0 si l'edition a reussi, -1 sinon.

##############################
# create_sprite:
##############################

#
# Charge en memoire un sprite
#

int     create_sprite(char *path);

path = le chemin du sprite a charger. (accepte les .png,.jpg,...)

Accepte les .spk, qui est un format d'animation de png.
Sa description est dans un fichier annexe.

RETURN VALUE
retourne l'identifiant du sprite, -1 s'il n'a pas reussi a trouver
le sprite, ou a le charger.

##############################
# create_gfx_entity:
##############################

#
# Cree une entitée a partir d'un sprite existant
#

int	create_gfx_entity(int id);

RETURN VALUE
retourne l'identifiant de l'entitee cree, -1 en cas d'erreur.


##############################
# edit_entity_on_surface:
##############################

#
# Positionne, ou re-positionne une entitee sur une surface
# existante.
#

int     edit_entity_on_surface(int id, int surf, int x, int y, int alpha);

id = identifiant de l'entitee
surf = identifiant de la surface
x = position en abscisses de l'entitee sur la surface (en pixels)
y = position en ordonnees de l'entitee sur la surface (en pixels)
alpha = determine la transparence de l'entitee (de 0 a 255, 255 etant opaque)

RETURN VALUE
-1 en cas d'erreur, 0 sinon.

##############################
# update_surf:
##############################

#
# Prepare l'affichage a l'ecran de surfaces
#

int	update_surf(int mini, int maxi);

mini = profondeur minimum
maxi = profondeur maximum

Prepare l'affichage des surfaces seulement pour les profondeurs
comprises entre le mini et le maxi (valeurs comprises).
Pour afficher toutes les surfaces, utilisez GFX_MIN_DEPTH et
GFX_MAX_DEPTH
La profondeur des surfaces sont definies a leur creation.

RETURN VALUE
-1 en cas d'erreur, 0 sinon.

##############################
# aff_screen:
##############################

#
# Affiche a l'ecran la memoire prealablement chargé avec update_surf
#

int	aff_screen();

RETURN VALUE
-1 en cas d'erreur, 0 sinon.

##############################
# destroy_surface:
##############################

#
# Efface une surface virtuelle 
#

void     destroy_surface(int id);

id = identifiant de la surface

##############################
# destroy_sprite:
##############################

#
# Efface un sprite
#

void     destroy_sprite(int id);

id = identifiant du sprite

##############################
# destroy_entity:
##############################

#
# Efface une entitee
#

void     destroy_gfx_entity(int id);

id = identifiant de l'entitee


#
## END_PAGES
#####################