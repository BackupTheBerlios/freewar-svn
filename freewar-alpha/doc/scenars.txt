Scenariis:

######################################
#1: scenario de selection sur map.

*********
contexte:
Le joueur clic gauche sur un peon.
*********

== le jeu
- Le jeu recoit l'evenement souris (x, y, gauche).
- Le jeu avec ces coordonnees et avec la conf de son gamespace deduit que c'est un clic sur la map.
  (different de mini-map ou menu ..)
- Il demande donc au moteur ce qu'il se trouve ici. (request : x, y)
== le moteur
- Le moteur regarde si le joueur a le droit de savoir ce qu'il se trouve a cet endroit.
  Si il a le droit, il lui retourne ce qu'il se trouve a cet endroit. (sous forme de structure
  admetons).
== le jeu
- Le jeu lis cette structure et en deduit qu'il s'agit d'un peon, sur gazon.
- Vu que c'etait un clic gauche, le jeu ordonne la selection du peon au moteur.
== le moteur
Le moteur joue le son associe a l'ordre (selection, peon) et execute l'ordre (affichage de
selection de l'unitee a l'ecran).

######################################
#2: scenario de deplacement d'unitees.

*********
contexte:
Le joueur a prealablement selectionné une unitée
Le joueur clic droit sur un endroit de la map.
*********

== le jeu
- Le jeu recoit l'evenement souris (x, y, droit).
- Le jeu avec ces coordonnees et la conf de son gamespace deduit que c'est un clic sur la map.
- Il demande donc au moteur ce qu'il se trouve ici. (request : x, y)
== le moteur
- Le moteur regarde si le joueur a le droit de savoir ce qu'il se trouve a cet endroit.
- Si il a le droit, il lui retourne ce qu'il se trouve a cet endroit. (sous forme de structure
  admetons).
== le jeu
- Le jeu lis cette structure, (fog of war ou pas) et vu qu'il y a une entitee selectionnee,
  en retire les informations de terrain, et ordonne :
	-dans le cas d'une unitee mobile et d'un terrain seul, son deplacement dans sa 
	 queue d'action au moteur.
	-dans le cas d'une unitee mobile et d'un terrain ou se trouve une unitee adverse,
	 son attaque.
	-dans le cas d'une unitee de reparation sur un terrain ou se trouve un batiment
	 allie endomage, ordone sa reparation. 
	-etc etc.. (chaque entitee aura par defaut dans la base de donnee une action associe
	 a chaque type d'entitees rencontre sur un clic d'action, qui sera ajouter a sa queue
	 d'actions gerer par le moteur.)

- pour le premier cas, celui de deplacement de l'unitee:
== le moteur
- Le moteur recoit l'ordre de deplacement de l'unitee #x.
- Si la queue d'action de cette unitee est vide, le moteur pecho la position de cette unitee, 
  et lance le path-finding avec l'emplacement d'ou elle dois se rendre.
- Sinon, le moteur rajoute l'action de deplacement de cette unit vers le point voulu dans la queue.
  Une fois son chemin trouve:
- Le moteur lance l'unitee sur le chemin trouvé. (en mode attaque par ex)
  (des que l'unitee rencontre un obstacle non attendu (autre unitee, unitee enemie, batiment), 
   un autre path-finding est invoqué, ou une autre action precisee dans les parametre du lancement
    de l'action 'mouvement'.)

################################################
#3: envoi d'un peon couper du bois avec le clavier.

********
contexte:
-le joueur appui sur 'PPPP', puis sur 'B':
********

== jeu
-le jeu recoit les evenements les un apres les autres, il recoit d'abord un 'P', ce
qui signifi, selection du premier peon inactif, et l'ajout a la selection courante.
-le jeu va lancer une requete au moteur pour pecho dans sa liste d'entitee une entitee de
type peon, et d'etat inactif.

== moteur
-le moteur va chercher dans sa base, et renvoyer (si une telle entitee existe) une structure
descriptive du peon trouve.

== jeu
-le jeu va ordonner au moteur de faire une selection d'unitee sur ce peon.

== moteur
-le moteur gere alors la selection demander par le jeu.

== jeu
-le jeu recoit un autre appui sur la touche 'P'.
-le jeu va redemander au moteur de lui pecho un peon libre, ce qu'il va faire si il le peu.
-le jeu va ordonner maintenant (vu que l'action precedente a ete un 'P') une selection
d'unitee avec en parametre les 2 peons !

== moteur
-le moteur selectionne alors les 2 peons.

== jeu
-le jeu va recevoir ainsi 2 autres appuis sur la touche 'P', et va donc faire en sorte que le
moteur ai une selection active de 4 peon.
-le jeu recoit maintenant un appui sur la touche 'B'.
-le jeu va regarder si il y a une action associee a la touche 'B' parmis toutes les unitees en
 selection, et va essayer de lancer cette action pour ces unitees la.
 (en locurence, appuyer sur 'B' avec la selection d'un peon, a pour effet de l'envoyer
 aller pecho du bois au plus proche.)
-le jeu va alors envoyer des requetes au moteur pour savoir la position de l'arbre la plus
 proche pour chaque unitees.

== moteur
-le moteur pour chaqunes de ces requetes (x,y de l'unitee + le type d'entitee a pecho au
 plus proche) va lancer sa recherche et renvoyer les coordonnees de l'entitee trouvee.

== jeu
-le jeu, maintenant qu'il a maintenant les coordonnees des arbres les plus proches de chacun
 des peon va pouvoir donner l'ordre au moteur du deplacement de ces unitees vers leur arbre
 respectif (en mode lache par ex).

== moteur
-le moteur pour chaque ordre va lancer un path-finding vers la position souhaitee.
-des que une entitee est arrivee au bout du chemin qui lui a ete atribuer avec le path-finding,
 le moteur renvoi un raport au jeu pour l'en informer.

== jeu
-le jeu va alors ordonner au moteur l'action recolte avec en parametre, le recolteur
 (le peon (si il en a le skill)), le recolte (l'arbre: x,y).

== moteur
-le moteur va alors mettre l'entitee peon (si il en a le skill) en recolte du bois sur le bois
 selectionne.(ce qui va affecter l'etat de l'entitee de "inactive" ou "en marche" a "recolte".)
 (ceci dans le cas ou la queue d'action de l'entitee est vide, sinon, il ajoute cette action
  a la queue).

ainsi dessuite pour chaque peon: au final, 'PPPPB' a eu pour effet de selectionner 4 peon, et
de les envoyer recolter du bois.
conclusion: le moteur ne gere que les action simple, tandis que les action compliquees
 (qui sont en fait un combo d'actions simple) seront gerer au niveau du jeu.

##############################
#4: construction d'un peon

*********
contexte:
- un batiment ayant la capacité de construire un peon est requise.
- le joueur donne l'ordre de construire un peon grace a une de ces entités.
*********

== jeu
- envoie un ordre au moteur avec : l'ID du constructeur, l'ID du construit, le point de sortie.

== le moteur
- va verifier les param (si l'Id du constructeur peux bien construire le 
  construit, ressources adequates / suffisantes, layers adequats, etc..)
- renvoi un mess au jeu:-si les parametres sont incorects, renvoi ..error et s'arrete
			-si les parametres sont correct, renvoi ok.
- le moteur va prelever les ressources necessaires.
- le moteur va lancer la construction du peon.
- quand la construction est achevee, il renvoi l'id de l'entitee creee et son emplacement au jeu 
  ET la place sur la map.
- le moteur execute alors les action du champs "live".

== jeu
- le jeu lance le son correspondant.




############################## 21/02/04
#5: construction d'un batiment 

*********
contexte:
- une entité ayant la capacité de construire un batiment est requise.
- le joueur donne l'ordre de construire un batiment grace a une de ces entités.
*********

== jeu
- envoie un ordre au moteur de voeux de construction de batiment.
boucle :
{
- le jeu pecho les coordonnees du curseur
- il envoi un ordre au moteur graphique pour afficher un sprite a cet endroit

== moteur
- affiche a l'ecran le sprite du batiment a construire (genre en transparant).
}

== jeu
- le joueur clique sur un endroit de la map ou il a envi de construire son batiment.
- le jeu envoi donc un ordre de construction au moteur d'entitee avec en parametre:
  - id du constructeur (dans le cas ou on n'as pas besoin de constructeur, on passera
    l'id d'une entitee constructrice invisible, servant juste poour sa).
  - l'id du batiment a construire.
  - les coordonees de construction.
== le moteur
- le moteur va prelever les ressources
- le moteur va lancer la construction du batiment.
- le moteur va en attendant que le batiment sois construit, placer un pov` sprite de
  chantier a l'endroit ou plus tard le batiment sera cree (pour eviter que des unitees
  puissent s'y mettre).
- quand la construction est terminee, il emleve le sprite et mets a la place celui du
  batiment voulu.
- le moteur execute alors les action du champs "live".
- le moteur dis au jeu que la construction est terminee.

== le jeu
- le jeu lance le son de fin de construction.

##################### 21/02/04
#6: une entitee meurt

== contexte:
sa vie est tombee a zero.


== le moteur
- envoi un mess au jeu de mort d'entitee.

== le moteur						| == le jeu
- aff le sprite de mort associe a cette entitee.	| - ordone au moteur de jouer le sons de la mort de cette unitee.


== moteur
- le moteur execute alors les action du champs "died". (ex: creation d'entitee
  cadavre qui vie pdt 30secondes).
- supprime l'entitee.


#################### 21/02/04
#7: gerage de queue d'aciton

== contexte:
un peon est selectionne.

== joueur
- il va donner l'ordre de se deplacer a un endroit. (ce qui aura pour
  effet de vider la queue d'action.)
- ensuite de rajouter a la queue d'action (via shift par exemple) la
  construction d'un batiment a cet endroit et il rajoute egalement le 
  ramassage de bois a un autre endroit.

== le jeu
- reception du premier ordre qui a pour but le deplacement de l'unitee.
- vu que la touche shift n'est pas selectionnee, le jeu va demander au moteur
  de vider la queue d'action de cette entitee.
- le jeu va ensuite demander au moteur de faire marcher notre gentil petit peon
  jusqu'a l'endroit voulu.

== le moteur
- le moteur va rajouter l'action de deplacement de cette entiee dans la queue des
  ses action qui est vide.
- le moteur fait donc bouger le peon. (vu que c'est la premiere action dans la queue)

== le jeu
- le jeu recoit alor l'ordre de construire une barack a un autre endroit. (avec la touche shift)
- le jeu demande l'action de construire ce batiment dans la queue du peon au moteur.

== le moteur
- le moteur rajoute alors l'action de construire le batiment dans la queue du peon.

== le jeu
- le jeu recoit ensuite l'ordre de recolte du bois a un autre endroit. (avec la touche shift)
- le jeu demande l'action de ramassage de bois du peon au moteur.

== le moteur
- le moteur rajoute l'action de ramassage de bois dans la queue d'action du peon.

====== tout se resout

== le moteur
- le peon se dirige toujours vers le point d'arriver de la premiere action.
- le peon arrive la ou il devait se trouver.
- la premiere action de deplacement est alors finie, donc le moteur supprime
  cette action de la queue.
- le moteur lance ensuite l'action suivante, a savoir, la construction d'une barracks.
- et ainsi de suite jusqu'a que toutes les actions dans la queue du peon se soient resoluent.


############################## 21/02/04
#8: un peon attaque un footman

== contexte:
le joueur est con, il envoi son peon attaquer un footman enemi.
le footman enemi vois pas le peon.

== le jeu
- le jeu recoit l'ordre du joueur de faire attaquer le footman enemi par le
  peon selectionner.
- le jeu demande au moteur de vider la queue d'action du peon.
- le jeu ordone au moteur de lancer l'action deplacement vers le footman dans la
  queue du peon, avec 2 parametres d'evenements du genre, reagir avec le mouvement du footman
  de l'id n, et s'arreter quand il se trouve x distance du point d'arrivee.
  n correspond a l'id du footman attaquer, x a la portee d'attaque du peon.)

== le moteur
- le moteur va verifier les parametres (unitee pouvant se deplacer, point d'arriver possible)
- le moteur va lancer le path-finding vers le point d'arriver
- le moteur va lancer le peon sur le chemin alors trouve.
- une fois le peon qui a realiser un des 2 evenements passer en parametre, le moteur
  arrete le peon et envoi un mess au jeu lui disant que le peon s'est trouver a tel
  ou tel evenements.

== le jeu
- si le footman a bouger, le jeu renvoi l'action deplacement avec les meme parametre que precedement
  au moteur.
- si le peon est a portee, le jeu envoi (prealablement la vidation de la queue) une action d'attaque/recolte au moteur avec en parametre:
  -l'id du peon
  -le type d'entitee a recolter/attaquer. (a savoir : "footman")
  -la position du footman.
  - l'evenement : plus a porter.

== le moteur
- le moteur va verifier les parametres de l'action d'attaque/recolte.
- le moteur va vider la queue d'action du peon, et y rajouter l'action attaque/recolte.
- le moteur va executer l'action.
- si le footman est a portee, cf scenar #3 (si tu comprends pas, relis le scenar 3, si tu comprends toujours pas, reli le encor.)
- si le footman n'est plus a portee, le moteur arrete l'action et envoi au jeu un message.

== le jeu
- le jeu recoi le message comme quoi le footman n'est plus a portee, et decide de relancer (comme precedement)
  l'action de mouvement du peon vers le footman enemi pour qu'il sois a portee.

== issue du combat, le peon se fait eclater.

